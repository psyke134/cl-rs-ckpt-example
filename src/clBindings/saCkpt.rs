pub use crate::clBindings::saAis::*;
/* automatically generated by rust-bindgen 0.66.1 */

pub const SA_CKPT_WR_ALL_REPLICAS: u32 = 1;
pub const SA_CKPT_WR_ACTIVE_REPLICA: u32 = 2;
pub const SA_CKPT_WR_ACTIVE_REPLICA_WEAK: u32 = 4;
pub const SA_CKPT_CHECKPOINT_COLLOCATED: u32 = 8;
pub const SA_CKPT_CHECKPOINT_READ: u32 = 1;
pub const SA_CKPT_CHECKPOINT_WRITE: u32 = 2;
pub const SA_CKPT_CHECKPOINT_CREATE: u32 = 4;
pub type SaCkptHandleT = SaUint64T;
pub type SaCkptCheckpointHandleT = SaUint64T;
pub type SaCkptSectionIterationHandleT = SaUint64T;
pub type SaCkptCheckpointCreationFlagsT = SaUint32T;
#[repr(C)]
pub struct SaCkptCheckpointCreationAttributesT {
    pub creationFlags: SaCkptCheckpointCreationFlagsT,
    pub checkpointSize: SaSizeT,
    pub retentionDuration: SaTimeT,
    pub maxSections: SaUint32T,
    pub maxSectionSize: SaSizeT,
    pub maxSectionIdSize: SaSizeT,
}
#[test]
fn bindgen_test_layout_SaCkptCheckpointCreationAttributesT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptCheckpointCreationAttributesT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptCheckpointCreationAttributesT>(),
        48usize,
        concat!("Size of: ", stringify!(SaCkptCheckpointCreationAttributesT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptCheckpointCreationAttributesT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaCkptCheckpointCreationAttributesT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creationFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(creationFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checkpointSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(checkpointSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retentionDuration) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(retentionDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSections) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(maxSections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSectionSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(maxSectionSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSectionIdSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointCreationAttributesT),
            "::",
            stringify!(maxSectionIdSize)
        )
    );
}
pub type SaCkptCheckpointOpenFlagsT = SaUint32T;
#[repr(C)]
pub struct SaCkptSectionIdT {
    pub idLen: SaUint16T,
    pub id: *mut SaUint8T,
}
#[test]
fn bindgen_test_layout_SaCkptSectionIdT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptSectionIdT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptSectionIdT>(),
        16usize,
        concat!("Size of: ", stringify!(SaCkptSectionIdT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptSectionIdT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaCkptSectionIdT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionIdT),
            "::",
            stringify!(idLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionIdT),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
pub struct SaCkptSectionCreationAttributesT {
    pub sectionId: *mut SaCkptSectionIdT,
    pub expirationTime: SaTimeT,
}
#[test]
fn bindgen_test_layout_SaCkptSectionCreationAttributesT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptSectionCreationAttributesT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptSectionCreationAttributesT>(),
        16usize,
        concat!("Size of: ", stringify!(SaCkptSectionCreationAttributesT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptSectionCreationAttributesT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SaCkptSectionCreationAttributesT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionCreationAttributesT),
            "::",
            stringify!(sectionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expirationTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionCreationAttributesT),
            "::",
            stringify!(expirationTime)
        )
    );
}
pub const SaCkptSectionStateT_SA_CKPT_SECTION_VALID: SaCkptSectionStateT = 1;
pub const SaCkptSectionStateT_SA_CKPT_SECTION_CORRUPTED: SaCkptSectionStateT = 2;
pub type SaCkptSectionStateT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaCkptSectionDescriptorT {
    pub sectionId: SaCkptSectionIdT,
    pub expirationTime: SaTimeT,
    pub sectionSize: SaSizeT,
    pub sectionState: SaCkptSectionStateT,
    pub lastUpdate: SaTimeT,
}
#[test]
fn bindgen_test_layout_SaCkptSectionDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptSectionDescriptorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptSectionDescriptorT>(),
        48usize,
        concat!("Size of: ", stringify!(SaCkptSectionDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptSectionDescriptorT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaCkptSectionDescriptorT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionDescriptorT),
            "::",
            stringify!(sectionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expirationTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionDescriptorT),
            "::",
            stringify!(expirationTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionDescriptorT),
            "::",
            stringify!(sectionSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionState) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionDescriptorT),
            "::",
            stringify!(sectionState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastUpdate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptSectionDescriptorT),
            "::",
            stringify!(lastUpdate)
        )
    );
}
pub const SaCkptSectionsChosenT_SA_CKPT_SECTIONS_FOREVER: SaCkptSectionsChosenT = 1;
pub const SaCkptSectionsChosenT_SA_CKPT_SECTIONS_LEQ_EXPIRATION_TIME: SaCkptSectionsChosenT = 2;
pub const SaCkptSectionsChosenT_SA_CKPT_SECTIONS_GEQ_EXPIRATION_TIME: SaCkptSectionsChosenT = 3;
pub const SaCkptSectionsChosenT_SA_CKPT_SECTIONS_CORRUPTED: SaCkptSectionsChosenT = 4;
pub const SaCkptSectionsChosenT_SA_CKPT_SECTIONS_ANY: SaCkptSectionsChosenT = 5;
pub type SaCkptSectionsChosenT = ::std::os::raw::c_uint;
#[repr(C)]
pub struct SaCkptIOVectorElementT {
    pub sectionId: SaCkptSectionIdT,
    pub dataBuffer: *mut ::std::os::raw::c_void,
    pub dataSize: SaSizeT,
    pub dataOffset: SaOffsetT,
    pub readSize: SaSizeT,
}
#[test]
fn bindgen_test_layout_SaCkptIOVectorElementT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptIOVectorElementT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptIOVectorElementT>(),
        48usize,
        concat!("Size of: ", stringify!(SaCkptIOVectorElementT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptIOVectorElementT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaCkptIOVectorElementT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectionId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptIOVectorElementT),
            "::",
            stringify!(sectionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptIOVectorElementT),
            "::",
            stringify!(dataBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptIOVectorElementT),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptIOVectorElementT),
            "::",
            stringify!(dataOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptIOVectorElementT),
            "::",
            stringify!(readSize)
        )
    );
}
#[repr(C)]
pub struct SaCkptCheckpointDescriptorT {
    pub checkpointCreationAttributes: SaCkptCheckpointCreationAttributesT,
    pub numberOfSections: SaUint32T,
    pub memoryUsed: SaUint32T,
}
#[test]
fn bindgen_test_layout_SaCkptCheckpointDescriptorT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptCheckpointDescriptorT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptCheckpointDescriptorT>(),
        56usize,
        concat!("Size of: ", stringify!(SaCkptCheckpointDescriptorT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptCheckpointDescriptorT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaCkptCheckpointDescriptorT))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).checkpointCreationAttributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointDescriptorT),
            "::",
            stringify!(checkpointCreationAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numberOfSections) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointDescriptorT),
            "::",
            stringify!(numberOfSections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryUsed) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCheckpointDescriptorT),
            "::",
            stringify!(memoryUsed)
        )
    );
}
pub type SaCkptCheckpointOpenCallbackT = ::std::option::Option<
    unsafe extern "C" fn(
        invocation: SaInvocationT,
        checkpointHandle: SaCkptCheckpointHandleT,
        error: SaAisErrorT,
    ),
>;
pub type SaCkptCheckpointSynchronizeCallbackT =
    ::std::option::Option<unsafe extern "C" fn(invocation: SaInvocationT, error: SaAisErrorT)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaCkptCallbacksT {
    pub saCkptCheckpointOpenCallback: SaCkptCheckpointOpenCallbackT,
    pub saCkptCheckpointSynchronizeCallback: SaCkptCheckpointSynchronizeCallbackT,
}
#[test]
fn bindgen_test_layout_SaCkptCallbacksT() {
    const UNINIT: ::std::mem::MaybeUninit<SaCkptCallbacksT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SaCkptCallbacksT>(),
        16usize,
        concat!("Size of: ", stringify!(SaCkptCallbacksT))
    );
    assert_eq!(
        ::std::mem::align_of::<SaCkptCallbacksT>(),
        8usize,
        concat!("Alignment of ", stringify!(SaCkptCallbacksT))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saCkptCheckpointOpenCallback) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCallbacksT),
            "::",
            stringify!(saCkptCheckpointOpenCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).saCkptCheckpointSynchronizeCallback) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SaCkptCallbacksT),
            "::",
            stringify!(saCkptCheckpointSynchronizeCallback)
        )
    );
}
extern "C" {
    pub fn saCkptInitialize(
        ckptHandle: *mut SaCkptHandleT,
        callbacks: *const SaCkptCallbacksT,
        version: *mut SaVersionT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSelectionObjectGet(
        ckptHandle: SaCkptHandleT,
        selectionObject: *mut SaSelectionObjectT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptDispatch(
        ckptHandle: SaCkptHandleT,
        dispatchFlags: SaDispatchFlagsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptFinalize(ckptHandle: SaCkptHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointOpen(
        ckptHandle: SaCkptHandleT,
        ckeckpointName: *const SaNameT,
        checkpointCreationAttributes: *const SaCkptCheckpointCreationAttributesT,
        checkpointOpenFlags: SaCkptCheckpointOpenFlagsT,
        timeout: SaTimeT,
        checkpointHandle: *mut SaCkptCheckpointHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointOpenAsync(
        ckptHandle: SaCkptHandleT,
        invocation: SaInvocationT,
        ckeckpointName: *const SaNameT,
        checkpointCreationAttributes: *const SaCkptCheckpointCreationAttributesT,
        checkpointOpenFlags: SaCkptCheckpointOpenFlagsT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointClose(checkpointHandle: SaCkptCheckpointHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointUnlink(
        ckptHandle: SaCkptHandleT,
        checkpointName: *const SaNameT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointRetentionDurationSet(
        checkpointHandle: SaCkptCheckpointHandleT,
        retentionDuration: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptActiveReplicaSet(checkpointHandle: SaCkptCheckpointHandleT) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointStatusGet(
        checkpointHandle: SaCkptCheckpointHandleT,
        checkpointStatus: *mut SaCkptCheckpointDescriptorT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionCreate(
        checkpointHandle: SaCkptCheckpointHandleT,
        sectionCreationAttributes: *mut SaCkptSectionCreationAttributesT,
        initialData: *const SaUint8T,
        initialDataSize: SaSizeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionDelete(
        checkpointHandle: SaCkptCheckpointHandleT,
        sectionId: *const SaCkptSectionIdT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionExpirationTimeSet(
        checkpointHandle: SaCkptCheckpointHandleT,
        sectionId: *const SaCkptSectionIdT,
        expirationTime: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionIterationInitialize(
        checkpointHandle: SaCkptCheckpointHandleT,
        sectionsChosen: SaCkptSectionsChosenT,
        expirationTime: SaTimeT,
        sectionIterationHandle: *mut SaCkptSectionIterationHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionIterationNext(
        sectionIterationHandle: SaCkptSectionIterationHandleT,
        sectionDescriptor: *mut SaCkptSectionDescriptorT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionIterationFinalize(
        sectionIterationHandle: SaCkptSectionIterationHandleT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointWrite(
        checkpointHandle: SaCkptCheckpointHandleT,
        ioVector: *const SaCkptIOVectorElementT,
        numberOfElements: SaUint32T,
        erroneousVectorIndex: *mut SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptSectionOverwrite(
        checkpointHandle: SaCkptCheckpointHandleT,
        sectionId: *const SaCkptSectionIdT,
        dataBuffer: *const ::std::os::raw::c_void,
        dataSize: SaSizeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointRead(
        checkpointHandle: SaCkptCheckpointHandleT,
        ioVector: *mut SaCkptIOVectorElementT,
        numberOfElements: SaUint32T,
        erroneousVectorIndex: *mut SaUint32T,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointSynchronize(
        ckeckpointHandle: SaCkptCheckpointHandleT,
        timeout: SaTimeT,
    ) -> SaAisErrorT;
}
extern "C" {
    pub fn saCkptCheckpointSynchronizeAsync(
        checkpointHandle: SaCkptCheckpointHandleT,
        invocation: SaInvocationT,
    ) -> SaAisErrorT;
}
