pub use crate::clBindings::clCommon::*;
/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
pub struct ClMD5 {
    pub md5sum: [ClUint8T; 16usize],
}
#[test]
fn bindgen_test_layout_ClMD5() {
    const UNINIT: ::std::mem::MaybeUninit<ClMD5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClMD5>(),
        16usize,
        concat!("Size of: ", stringify!(ClMD5))
    );
    assert_eq!(
        ::std::mem::align_of::<ClMD5>(),
        1usize,
        concat!("Alignment of ", stringify!(ClMD5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md5sum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClMD5),
            "::",
            stringify!(md5sum)
        )
    );
}
pub type ClMD5T = ClMD5;
extern "C" {
    pub fn clMD5Compute(data: *mut ClUint8T, size: ClUint32T, result: *mut ClUint8T);
}
